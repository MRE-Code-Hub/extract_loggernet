##############################################################################
#
# Example conf file for the extract_loggernet.py script.
#
#

##############################################################################
# REQUIRED PARAMETERS
##############################################################################
#
# INPUT_FILE_PATH
#     The path(s) of the logger file(s) to extract data from.
#     Can be specified in three ways:
#
#     1. Single file path (string):
#        INPUT_FILE_PATH: /path/to/file.dat
#
#     2. List of file paths:
#        INPUT_FILE_PATH:
#          - /path/to/file1.dat
#          - /path/to/file2.dat
#
#     3. Pattern with named capture groups (advanced):
#        INPUT_FILE_PATH:
#          pattern: '^/data/(?P<site>\w+)/(?P<logger>\w+)/.*\.dat$'
#          search_root: /data  # Optional: limits search to this directory
#
#        The pattern is a Python regex with named groups (e.g., (?P<name>...)).
#        The pattern should match complete file paths (use ^ for start).
#        The optional 'search_root' limits where to search for performance.
#        Captured group names can be used as placeholders in OUTPUT_DIR.
#        For example, if the pattern matches /data/site1/CR1000/file.dat,
#        then {site} = "site1" and {logger} = "CR1000" can be used in OUTPUT_DIR.
#
#        Regex flags: Add (?i) at start for case-insensitive matching:
#          pattern: '(?i)^/data/.*\.dat$'  # Matches .dat, .DAT, .Dat, etc.
#
INPUT_FILE_PATH: /Users/fred/extract_loggernet/test/test_files/CR23/3-GndRadData.dat

# OUTPUT_DIR
#     The directory to place extracted hourly files in.
#     Must be an absolute path.
#
#     If INPUT_FILE_PATH uses pattern matching with named groups,
#     you can use those captured values as placeholders:
#        OUTPUT_DIR: /output/{site}/{logger}
#
#     For simple file paths (no pattern), just use a regular path:
#        OUTPUT_DIR: /Users/fred/extract_loggernet/out
#
OUTPUT_DIR: /Users/fred/extract_loggernet/out

##############################################################################
# OPTIONAL PARAMETERS
##############################################################################
#
# CDL_TYPE
#     The type of Campbell Data Logger. Default is CR1000X.
#     Set to 'CR23' to read CR23 data logger files (since
#     they have a different file format).

#     You could set CDL_TYPE to 'CR1000' or 'CR3000', but
#     since both of those data loggers use the same file
#     format as CR1000X, it is unnecessary.
#
CDL_TYPE: CR23

# SPLIT_INTERVAL
#     Specify DAILY to extract daily files instead of the default hourly.
#
SPLIT_INTERVAL: HOURLY

# FILE_NAME_FORMAT
#     A string specifying the format for naming the output files.
#     Supports multiple types of placeholders:
#
#     Timestamp placeholders:
#       YYYY (year), MM (month), DD (day), hh (hour), mm (minute), ss (second)
#
#     Input file placeholders:
#       PREFIX - Original input filename without extension
#       EXT    - Original input file extension
#
#     Captured group placeholders (when using pattern matching):
#       {group_name} - Any named group from INPUT_FILE_PATH pattern
#
#     Examples:
#       'PREFIX.YYYYMMDDhhmmss.EXT'
#           Uses original filename: mydata.20251015120000.dat
#
#       '{site}_{logger}_data.YYYYMMDDhhmmss.csv'
#           Uses captured groups: siteA_CR3000_data.20251015120000.csv
#
#       'YYYY/MM/PREFIX.YYYYMMDDhhmmss.EXT'
#           Nested directories: 2025/10/mydata.20251015120000.dat
#
#       'YYYY/MM/{site}/data.YYYYMMDDhhmmss.csv'
#           Combined: 2025/10/siteA/data.20251015120000.csv
#
FILE_NAME_FORMAT: PREFIX.YYYYMMDDhhmmss.EXT
# RENAME_PREFIX (DEPRECATED - use literal names in FILE_NAME_FORMAT instead)
#     Legacy option: If set, this will replace original file's prefix.
#     Better approach: Use literal names directly in FILE_NAME_FORMAT
#     Example: 'my_custom_name.YYYYMMDDhhmmss.csv'
#
# RENAME_PREFIX: my_file_name

# RENAME_EXTENSION (DEPRECATED - use literal extension in FILE_NAME_FORMAT)
#     Legacy option: If set, replaces the original file's extension.
#     Better approach: Use literal extension in FILE_NAME_FORMAT
#     Example: 'PREFIX.YYYYMMDDhhmmss.csv'
#
# RENAME_EXTENSION: csv

# CACHE_PATH
#     Optional prefix path for the cache directory location.
#     The script tracks file positions using a cache file stored in
#     .extract_loggernet_cache/ relative to the input file location.
#
#     By default (empty string), the cache is created next to the input file:
#       Input file: /data/logger.dat
#       Cache file: /data/.extract_loggernet_cache/logger_file_position.yaml
#
#     If CACHE_PATH is set, it will be prepended to the input file path:
#       CACHE_PATH: /var/cache
#       Input file: /data/logger.dat
#       Cache file: /var/cache/data/.extract_loggernet_cache/logger_file_position.yaml
#
#     This is useful if you don't have write permissions in the input directory
#     or want to centralize cache files.
#
# CACHE_PATH:
